{"version":3,"sources":["state.ts","SearchForm.tsx","MovieListCard.tsx","MovieList.tsx","PopUp.tsx","API.ts","HighRatedList.tsx","App.tsx","index.tsx"],"names":["mediaTypes","reducer","state","event","produce","draft","type","movies","page","selectedMovie","undefined","popupState","clickedMovieId","mediaType","payload","search","SearchFormCon","styled","form","InputField","input","SelectField","select","SubmitButton","button","SearchForm","submit","useState","newSearch","setNewSearch","newMediaType","setNewMediaType","action","onSubmit","e","preventDefault","placeholder","value","onChange","target","map","key","MovieListTile","li","Poster","img","MovieTileInfo","div","MovieTitle","MovieListCard","movie","onClick","imdbID","src","alt","Title","MoviesList","MovieList","clicked","item","id","PopUpContainer","PopUpWindow","PopUpBackButton","PopUpTitle","PopUpYear","PopUpPlot","PopUpPoster","PopUpAwards","PopUpIMDBRating","PopUp","selected","backClick","Released","imdbRating","Plot","Awards","getMovies","axios","get","then","response","data","getDetailedMovie","Container","Item","HighRatedList","highRatedMovies","MainContainer","ListAndTopRated","LeftColumn","RightColumn","ResultsFound","NavButtons","NavButton","PageNumber","App","useReducer","update","useEffect","a","Search","Promise","all","detailedMovies","console","log","fetchMovies","sortedMovies","React","useMemo","slice","sort","b","parseFloat","length","find","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.122e75b4.chunk.js","sourcesContent":["import React from \"react\";\nimport { DetailedMovie } from \"./API\";\nimport produce from \"immer\";\n\n// the \"as const\" is just saying this is an array of these specific strings\nexport const mediaTypes = [\"movie\", \"series\"] as const;\n// because mediaTypes is an array of 2 (currently but could be updated) specific strings\n// if we get it's type when accessed by a number\n// e.g. mediaTypes[0] we get a string union e.g. \"movie\" | \"series\" without having to manually type it\nexport type MediaType = typeof mediaTypes[number];\n\nexport type State = {\n  search: string;\n  movies: DetailedMovie[];\n  page: number;\n  selectedMovie: string | undefined;\n  popupState: boolean;\n  mediaType: MediaType;\n};\n\nexport const initialState = (): State => ({\n  search: \"Star Wars\",\n  movies: [],\n  page: 1,\n  selectedMovie: undefined,\n  popupState: false,\n  mediaType: \"movie\",\n});\n\nexport type Events =\n  | {\n      type: \"movies fetched\";\n      movies: DetailedMovie[];\n    }\n  | {\n      type: \"popup visibility changed\";\n      visibility: boolean;\n    }\n  | {\n      type: \"page button minus clicked\";\n    }\n  | {\n      type: \"page button plus clicked\";\n    }\n  | {\n      type: \"popup back button clicked\";\n    }\n  | {\n      type: \"movies list item clicked\";\n      clickedMovieId: string;\n    }\n  | {\n      type: \"search submitted\";\n      payload: {\n        mediaType: MediaType;\n        search: string;\n      };\n    };\n\nexport const reducer: React.Reducer<State, Events> = (state, event) =>\n  produce(state, (draft) => {\n    switch (event?.type) {\n      case \"movies fetched\": {\n        draft.movies = event.movies;\n        break;\n      }\n      case \"page button plus clicked\": {\n        draft.page += 1;\n        break;\n      }\n      case \"page button minus clicked\": {\n        draft.page -= 1;\n        break;\n      }\n      case \"popup back button clicked\": {\n        draft.selectedMovie = undefined;\n        draft.popupState = false;\n        break;\n      }\n      case \"movies list item clicked\": {\n        draft.selectedMovie = event.clickedMovieId;\n        draft.popupState = true;\n        break;\n      }\n      case \"search submitted\": {\n        draft.page = 1;\n        draft.mediaType = event.payload.mediaType;\n        draft.search = event.payload.search;\n        break;\n      }\n    }\n  });\n","import React from \"react\";\nimport { useState } from \"react\";\nimport styled from \"styled-components\";\nimport \"./index.css\";\nimport { MediaType, mediaTypes } from \"./state\";\n\nconst SearchFormCon = styled.form`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst InputField = styled.input`\n  width: 300px;\n  font-size: 25px;\n  padding: 10px 20px;\n  margin: 5px 10px;\n  background: none;\n  border-bottom: 2px solid white;\n  border-left: none;\n  border-right: none;\n  border-top: none;\n  color: white;\n  font-family: \"Montserrat\", sans-serif;\n  :focus,\n  :hover {\n    outline-width: 0;\n  }\n  option {\n    background: red;\n  }\n`;\n\nconst SelectField = styled.select`\n  width: 150px;\n  font-size: 25px;\n  padding: 10px 20px;\n  margin: 5px 10px;\n  background: none;\n  border-bottom: 2px solid white;\n  border-left: none;\n  border-right: none;\n  border-top: none;\n  color: white;\n  font-family: \"Montserrat\", sans-serif;\n  :focus {\n    outline-width: 0;\n  }\n`;\n\nconst SubmitButton = styled.button`\n  font-size: 25px;\n  font-family: \"Montserrat\", sans-serif;\n  padding: 10px 20px;\n  margin: 5px 10px;\n  border: 2px solid white;\n  border-radius: 10px;\n  background: none;\n  color: white;\n  transition: 0.2s;\n  :hover {\n    background: white;\n    color: rgb(66, 76, 84);\n  }\n`;\n\ntype SearchProps = {\n  search: string;\n  mediaType: MediaType;\n};\n\nexport const SearchForm = ({\n  submit,\n}: {\n  submit: (fullSearch: SearchProps) => void;\n}) => {\n  const [newSearch, setNewSearch] = useState(\"\");\n  const [newMediaType, setNewMediaType] = useState<MediaType>(\"movie\");\n  return (\n    <SearchFormCon\n      action=\"submit\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        if (newSearch !== \"\") {\n          submit({ search: newSearch, mediaType: newMediaType });\n          setNewSearch(\"\");\n        }\n      }}\n    >\n      <InputField\n        type=\"text\"\n        placeholder=\"search...\"\n        value={newSearch}\n        onChange={(e) => setNewSearch(e.target.value)}\n      />\n      <SelectField\n        onChange={(e) => setNewMediaType(e.target.value as MediaType)}\n      >\n        {mediaTypes.map((mediaType) => (\n          <option key={mediaType} value={mediaType}>\n            {mediaType}\n          </option>\n        ))}\n      </SelectField>\n      <SubmitButton type=\"submit\">Search</SubmitButton>\n    </SearchFormCon>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { DetailedMovie } from \"./API\";\n\nconst MovieListTile = styled.li`\n  display: flex;\n  flex-direction: row;\n  list-style: none;\n  flex: 0 0 18%;\n  margin: 10px 10px;\n  padding: 10px 10px;\n  width: 500px;\n  background: white;\n  border-radius: 8px;\n`;\n\nconst Poster = styled.img`\n  opacity: 1;\n  height: 300px;\n  width: 200px;\n  transition: 0.5s ease;\n  backface-visibility: hidden;\n  :hover {\n    opacity: 0.5;\n  }\n`;\n\nconst MovieTileInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst MovieTitle = styled.div`\n  font-size: 22px;\n  padding: 10px;\n`;\n\nexport const MovieListCard = ({\n  movie,\n  onClick,\n}: {\n  movie: DetailedMovie;\n  onClick: (id: string) => void;\n}) => {\n  return (\n    <MovieListTile onClick={() => onClick(movie.imdbID)}>\n      <Poster src={movie.Poster} alt=\"#\" />\n      <MovieTileInfo>\n        <MovieTitle>{movie.Title}</MovieTitle>\n      </MovieTileInfo>\n    </MovieListTile>\n  );\n};\n","import React from \"react\";\nimport { MovieListCard } from \"./MovieListCard\";\nimport styled from \"styled-components\";\nimport { DetailedMovie } from \"./API\";\n\nconst MoviesList = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  background: rgb(34, 41, 46);\n`;\n\nexport const MovieList = ({\n  movies,\n  clicked,\n}: {\n  movies: DetailedMovie[];\n  clicked: (id: string) => void;\n}) => {\n  return (\n    <MoviesList>\n      {movies.map((item) => {\n        return (\n          <MovieListCard\n            key={item.imdbID}\n            movie={item}\n            onClick={(id) => clicked(id)}\n          />\n        );\n      })}\n    </MoviesList>\n  );\n};\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { DetailedMovie } from \"./API\";\nimport \"./index.css\";\n\nconst PopUpContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: auto;\n  font-family: \"Montserrat\", sans-serif;\n  background: rgb(34, 41, 46);\n  height: 100vh;\n  width: 70%;\n`;\n\nconst PopUpWindow = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background: white;\n  color: rgb(66, 76, 84);\n  padding: 20px;\n  border-radius: 25px;\n`;\n\nconst PopUpBackButton = styled.button`\n  font-size: 25px;\n  font-family: \"Montserrat\", sans-serif;\n  padding: 10px 20px;\n  margin: 5px 10px;\n  border: 2px solid white;\n  border-radius: 10px;\n  background: none;\n  color: white;\n  transition: 0.2s;\n  :hover {\n    background: white;\n    color: rgb(66, 76, 84);\n  }\n`;\n\nconst PopUpTitle = styled.div`\n  text-align: center;\n  padding: 10px;\n  color: rgb(66, 76, 84);\n  font-size: 35px;\n`;\n\nconst PopUpYear = styled.div`\n  padding: 10px;\n  color: rgb(66, 76, 84);\n  font-size: 15px;\n`;\n\nconst PopUpPlot = styled.div`\n  padding: 10px;\n  color: rgb(66, 76, 84);\n  font-size: 15px;\n`;\n\nconst PopUpPoster = styled.img`\n  padding: 10px;\n  height: 450px;\n  width: 300;\n`;\n\nconst PopUpAwards = styled.div`\n  padding: 10px;\n  color: rgb(66, 76, 84);\n  font-size: 12px;\n  font-style: italic;\n`;\n\nconst PopUpIMDBRating = styled.div`\n  padding: 10px;\n  color: rgb(66, 76, 84);\n  font-size: 16px;\n`;\n\nexport const PopUp = ({\n  selected,\n  backClick,\n}: {\n  selected: DetailedMovie | undefined;\n  backClick: () => void;\n}) => {\n  if (!selected) return null;\n  return (\n    <PopUpContainer>\n      <PopUpWindow>\n        <PopUpTitle>{selected.Title}</PopUpTitle>\n        <PopUpYear>{selected.Released}</PopUpYear>\n        <PopUpIMDBRating>IMDB - {selected.imdbRating}/10</PopUpIMDBRating>\n        <PopUpPlot>\n          {selected.Plot}\n          <PopUpAwards>{selected.Awards}</PopUpAwards>\n        </PopUpPlot>\n        <PopUpPoster src={selected.Poster} alt=\"\"></PopUpPoster>\n      </PopUpWindow>\n      <PopUpBackButton onClick={() => backClick()}>Back</PopUpBackButton>\n    </PopUpContainer>\n  );\n};\n","import axios from \"axios\";\n\nexport type MovieResponse = {\n  Search: Movie[];\n  Response: string;\n  totalResults: string;\n};\n\nexport type Movie = {\n  Title: string;\n  Year: string;\n  imdbID: string;\n  Type: string;\n  Poster: string;\n  imdbRating: string;\n};\nexport type DetailedMovie = {\n  Title: string;\n  Plot: string;\n  Released: string;\n  Runtime: string;\n  Awards: string;\n  imdbID: string;\n  imdbRating: string;\n  Poster: string;\n};\n\nexport const getMovies = (search: string, page: number, type: string) => {\n  return axios\n    .get<MovieResponse>(\n      `https://www.omdbapi.com/?apikey=13d6c617&s=${search}&page=${page}&type=${type}`\n    )\n    .then((response) => {\n      return response.data;\n    });\n};\n\nexport const getDetailedMovie = (id: string | undefined) => {\n  return axios\n    .get<DetailedMovie>(`https://www.omdbapi.com/?apikey=13d6c617&i=${id}`)\n    .then((response) => {\n      return response.data;\n    });\n};\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { DetailedMovie } from \"./API\";\n\nconst Container = styled.div`\n  background: white;\n  padding: 10px;\n  margin: 10px 10px;\n  border-radius: 8px;\n`;\n\nconst Item = styled.div`\n  font-size: 20px;\n  padding: 20px 0px;\n`;\n\nexport const HighRatedList = ({\n  highRatedMovies,\n}: {\n  highRatedMovies: DetailedMovie[] | undefined;\n}) => {\n  if (!highRatedMovies) return null;\n  return (\n    <Container>\n      {highRatedMovies.map((movie) => {\n        return (\n          <Item>\n            {movie.Title} {movie.imdbRating}\n          </Item>\n        );\n      })}\n    </Container>\n  );\n};\n","import React, { useReducer } from \"react\";\nimport styled from \"styled-components\";\nimport { useEffect } from \"react\";\nimport { SearchForm } from \"./SearchForm\";\nimport { MovieList } from \"./MovieList\";\nimport { PopUp } from \"./PopUp\";\nimport { getMovies, getDetailedMovie } from \"./API\";\nimport { HighRatedList } from \"./HighRatedList\";\nimport { initialState, reducer } from \"./state\";\n\nconst MainContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background: rgb(34, 41, 46);\n  height: 100%;\n  width: 100%;\n  margin: 0px;\n`;\n\nconst ListAndTopRated = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst LeftColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst RightColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Title = styled.div`\n  color: white;\n  text-align: center;\n  font-size: 50px;\n  padding: 20px;\n`;\n\nconst ResultsFound = styled.div`\n  color: white;\n  text-align: center;\n  padding-top: 20px;\n`;\n\nconst NavButtons = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n`;\n\nconst NavButton = styled.button`\n  font-size: 25px;\n  font-family: \"Montserrat\", sans-serif;\n  padding: 10px 20px;\n  margin: 5px 10px;\n  border: 2px solid white;\n  border-radius: 10px;\n  background: none;\n  color: white;\n  transition: 0.2s;\n  :hover {\n    background: white;\n    color: rgb(66, 76, 84);\n  }\n`;\n\nconst PageNumber = styled.div`\n  color: white;\n`;\n\nfunction App() {\n  const [state, update] = useReducer(reducer, initialState());\n\n  useEffect(() => {\n    async function fetchMovies() {\n      try {\n        // destructure and alias so Search can be referred to as movies\n        const { Search: movies } = await getMovies(\n          state.search,\n          state.page,\n          state.mediaType\n        );\n        const detailedMovies = await Promise.all(\n          movies.map((movie) => getDetailedMovie(movie.imdbID))\n        );\n        update({ type: \"movies fetched\", movies: detailedMovies });\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    if (state.search !== null) {\n      fetchMovies();\n    }\n  }, [state.search, state.page, state.mediaType]);\n\n  const sortedMovies = React.useMemo(() => {\n    return state.movies\n      ? state.movies.slice(0).sort((a, b) => {\n          return parseFloat(b.imdbRating) - parseFloat(a.imdbRating);\n        })\n      : [];\n  }, [state.movies]);\n\n  return !state.movies ? null : (\n    <MainContainer>\n      <Title>Movie Database</Title>\n      {state.popupState && state.selectedMovie && state.movies.length ? (\n        <PopUp\n          selected={state.movies.find(\n            (movie) => movie.imdbID === state.selectedMovie\n          )}\n          backClick={() =>\n            void update({\n              type: \"popup back button clicked\",\n            })\n          }\n        />\n      ) : (\n        <div>\n          <SearchForm\n            submit={({ search, mediaType }) =>\n              void update({\n                type: \"search submitted\",\n                payload: {\n                  mediaType,\n                  search,\n                },\n              })\n            }\n          />\n          <ResultsFound>\n            {state.movies.length} results for \"{state.search}\"\n          </ResultsFound>\n          <ListAndTopRated>\n            <LeftColumn>\n              <HighRatedList highRatedMovies={sortedMovies} />\n            </LeftColumn>\n            <RightColumn>\n              <MovieList\n                movies={state.movies}\n                clicked={(id) =>\n                  void update({\n                    type: \"movies list item clicked\",\n                    clickedMovieId: id,\n                  })\n                }\n              />\n            </RightColumn>\n          </ListAndTopRated>\n\n          <NavButtons>\n            {state.page === 1 ? null : (\n              <NavButton\n                onClick={() =>\n                  void update({\n                    type: \"page button minus clicked\",\n                  })\n                }\n              >\n                Prev\n              </NavButton>\n            )}\n            <NavButton\n              onClick={() =>\n                void update({\n                  type: \"page button plus clicked\",\n                })\n              }\n            >\n              Next\n            </NavButton>\n            <PageNumber> page {state.page}</PageNumber>\n          </NavButtons>\n        </div>\n      )}\n    </MainContainer>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}